buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

group = 'com.affehund'
version = '1.18.1-1.0.0'

java {
    archivesBaseName = 'ohmygoat-forge'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    // mappings channel: 'official', version: '1.18.1'
    mappings channel: 'parchment', version: '2022.02.13-1.18.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                ohmygoat {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                ohmygoat {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'ohmygoat', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                ohmygoat {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "ohmygoat.refmap.json"

    config "ohmygoat.mixins.json"
}

// Include resources generated by data generators.
// sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.1-39.1.1'

    // mixins
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // jei
    compileOnly fg.deobf("mezz.jei:jei-1.18.1:9.2.1.69:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.18.1:9.2.1.69")

    implementation fg.deobf("curse.maven:toptemp-245211:3665852")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "ohmygoat",
                "Specification-Vendor"    : "Affehund",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Affehund",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')
